facet_wrap(~panel)
)
p1 + s + theme(legend.position = "none",
axis.title.x = element_blank(),
plot.margin = margin(0, 0, -2, 0, "cm")) +
p2 + s + theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.margin = margin(0, 0, -2, 0, "cm")) +
p3 + s + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.margin = margin(0, 0, -2, 0, "cm")) +
patchwork::plot_spacer() +
p4 + s + theme(legend.position = c(-.8, .65),
axis.title.y = element_blank()) +
p5 + s + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
md <- crit %>%
mutate(environment = fct_relevel(environment, 'short', 'long', 'island'),
dependency = as.factor(dependency)) %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE)) %>%
filter(study == '210510_do',
group == 'mandarin',
task == 'mandarin_ajt')
md <- crit %>%
mutate(environment = fct_relevel(environment, 'short', 'long', 'island'),
dependency = as.factor(dependency)) %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE)) %>%
filter(study == '210510_do',
group == 'english',
task == 'english_ajt')
contrasts(md$dependency)
contrasts(md$environment)
tic()
model1 <- glmer(acceptance ~ environment * dependency +
(1 + environment * dependency | participant) +
(1 + environment * dependency | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6)))
summary(model1)
toc()
beep(1)
View(md)
check <- md %>%
group_by(study, group, participant) %>%
summarise() %>%
ungroup()
contrasts(md$dependency)
contrasts(md$environment)
class(md$dependency)
class(md$environment)
tic()
model1 <- glmer(acceptance ~ environment * dependency +
(1 + environment * dependency | participant) +
(1 + environment * dependency | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa"))
summary(model1)
toc()
1436.99/60
# doen-ejt
# boundary (singular) fit: see help('isSingular')
# Fixed effects:
#   Estimate Std. Error z value Pr(>|z|)
# (Intercept)                           4.4571     0.6719   6.634 3.27e-11 ***
# dependencypronoun                    -7.6782     0.8221  -9.340  < 2e-16 ***
# environmentlong                      -0.5082     0.9037  -0.562    0.574
# environmentisland                    -4.8227     0.7766  -6.210 5.31e-10 ***
# environmentlong:dependencypronoun     0.3287     1.0535   0.312    0.755
# environmentisland:dependencypronoun   5.2213     0.9500   5.496 3.88e-08 ***
saveRDS(model1, file = 'models/ajt_doen_acc_md1.rds')
tic()
model1 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment | participant) +
(1 + dependency * environment | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6)))
summary(model1)
toc()
beep(1)
25*2.5
saveRDS(model1, file = 'models/ajt_doen_acc_maxfun_md1.rds')
model1 %>%
emmeans(~ dependency * environment) %>%
contrast('pairwise', by = 'environment') %>%
summary(by = NULL, adjust = 'holm')
model1 <- readRDS('models/ajt_doen_acc_md1.rds')
model1 <- readRDS('models/ajt_doen_acc_md1.rds')
summary(model1)
P value adjustment: holm method for 3 tests
1e6 + 2
md <- crit %>%
mutate(environment = fct_relevel(environment, 'short', 'long', 'island'),
dependency = as.factor(dependency)) %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE)) %>%
filter(study == '210510_do',
group == 'korean',
task == 'korean_ajt')
check <- md %>%
group_by(study, group, participant) %>%
summarise() %>%
ungroup()
class(md$dependency)
class(md$environment)
tic()
model1 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment | participant) +
(1 + dependency * environment | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6)))
summary(model1)
toc()
beep(1)
install.packages('koRpus')
library(koRpus)
string <- 'This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. This is an awesome sentence. '
string
MATTR(string, window = 50)
MATTR(string, window = 50, language = 'English')
MATTR(string, window = 50, lang = 'en')
MATTR(string, window = 50)
install.packages('koRpus.lang.en')
library(koRpus.lang.en)
library(koRpus.lang.en)
MATTR(string, window = 50)
MATTR(string, window = 50, lang = 'en')
MATTR(string, window = 50, char = FALSE)
MATTR(string)
koRpus::MATTR(string)
koRpus.lang.en::MATTR(string)
lex.div(string)
tagged <- treetag(string)
tagged <- treetag(string, treetagger="manual", lang="en")
MATTR(tagged)
tagged <- treetag(string, treetagger="manual", lang="en")
tokenized <- tokenize(string)
install.koRpus.lang("en")
library(koRpus.lang.en)
install.packages('quanteda')
library(quanteda)
compute_mattr(string, MATTR_window = 50L)
quanteda::compute_mattr(string, MATTR_window = 50L)
# load packages
library(tidyverse) # for data processing
library(lmerTest) # for mixed-effects modeling
library(readxl) # for reading .xlsx files
library(base64enc) # for converting recordings from base64 to audio files
library(stringdist) # for calculating edit distance on c-test responses
library(hunspell) # for spell checking of c-test responses
library(patchwork) # for plotting
library(jsonlite) # for unpacking json
library(beepr) # for notifications
library(tictoc) # for timing operations
library(ggh4x) # for plotting
library(emmeans) #  for post-hoc tests; see https://marissabarlaz.github.io/portfolio/contrastcoding/
df <- read_csv('data/data.csv', col_types = cols(.default = 'c')) %>%
select(-audio_data)
ct <- read_csv('data/ctest_scored.csv', col_types = cols(.default = 'f', accuracy = 'l'))
ajt <- df %>%
filter(task %in% c('english_ajt', 'korean_ajt', 'mandarin_ajt')) %>%
arrange(study, group, participant) %>%
select_if(function(x){!all(is.na(x))})
check <- ajt %>%
group_by(study, group, task, participant) %>%
summarise() %>%
ungroup() %>%
group_by(study, group, task) %>%
summarise(n = n()) %>%
ungroup()
View(ajt)
View(check)
check <- ajt %>%
filter(!response %in% c(1, 2, 3, 4, 5, 6))
ajt <- ajt %>%
filter(is.na(response) == FALSE)
ajt <- ajt %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE))
ajt <- ajt %>%
mutate(response = as.numeric(response)) %>%
group_by(study, group, task, participant) %>%
mutate(zscore = (response - mean(response, na.rm=T)) / sd(response, na.rm = T)) %>%
ungroup()
check <- ajt %>%
mutate(condition = as.factor(condition))
summary(check$condition)
temp <- ajt %>%
filter(condition %in% c('grammatical', 'ungrammatical')) %>%
mutate(accuracy = as.logical(accuracy)) %>%
group_by(study, group, task, participant) %>%
summarise(acc_rate = mean(accuracy, na.rm = T)) %>%
ungroup()
check <- temp %>%
group_by(study, group, task) %>%
summarise(n = n()) %>%
ungroup()
check <- temp %>%
filter(acc_rate <= .5)
ggplot(temp, aes(x=group, y=acc_rate, fill=group, label=participant)) +
geom_hline(yintercept=.5) +
geom_violin() +
geom_boxplot(width = .1, fill='white') +
theme_classic() +
scale_x_discrete(name="group",
limits = c('english', 'korean', 'mandarin'),
labels = c('ENS', 'KLE', 'MLE')) +
scale_y_continuous(name="accuracy rate",
limits=c(0, 1)) +
theme(text = element_text(size = 12),
plot.title = element_text(size = 12, hjust = .5),
legend.position = "hide") +
facet_wrap(~task)
ajt <- ajt %>%
left_join(temp, by = c('study', 'group', 'task', 'participant')) %>%
filter(acc_rate > .5)
plot <- ajt %>%
group_by(group, task, participant, acc_rate) %>%
summarise() %>%
ungroup()
ggplot(plot, aes(x=group, y=acc_rate, fill=group, label=participant)) +
geom_hline(yintercept=.5) +
geom_violin() +
geom_boxplot(width = .1, fill='white') +
theme_classic() +
scale_x_discrete(name="group",
limits = c('english', 'korean', 'mandarin'),
labels = c('ENS', 'KLE', 'MLE')) +
scale_y_continuous(name="accuracy rate",
limits=c(0, 1)) +
theme(text = element_text(size = 12),
plot.title = element_text(size = 12, hjust = .5),
legend.position = "hide") +
facet_wrap(~task)
check <- ajt %>%
group_by(study, task, group, participant) %>%
summarise() %>%
ungroup() %>%
group_by(study, task, group) %>%
summarise(n = n()) %>%
ungroup()
crit <- ajt %>%
filter(!condition %in% c('grammatical', 'ungrammatical'))
plot <- crit %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE)) %>%
group_by(study, group, task, dependency, environment) %>%
summarise(mean = mean(acceptance, na.rm = T) * 100,
sd = sd(acceptance, na.rm = T) * 100,
n = n()) %>%
mutate(se = sd / sqrt(n),
ci = qt(1 - (0.05 / 2), n - 1) * se) %>%
ungroup() %>%
filter(dependency != 'NA') %>%
mutate(panel = case_when(group == 'english' & task == 'english_ajt' ~ 'ENS on English AJT',
group == 'korean' & task == 'english_ajt' ~ 'KLE on English AJT',
group == 'korean' & task == 'korean_ajt' ~ 'KLE on Korean AJT',
group == 'mandarin' & task == 'english_ajt' ~ 'MLE on English AJT',
group == 'mandarin' & task == 'mandarin_ajt' ~ 'MLE on Mandarin AJT')) %>%
mutate(panel = factor(panel, levels = c('ENS on English AJT',
'KLE on English AJT',
'MLE on English AJT',
'KLE on Korean AJT',
'MLE on Mandarin AJT')))
p1 <- ggplot(data=filter(plot, study == '210510_do', group == 'english' & task == 'english_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p2 <- ggplot(data=filter(plot, study == '210510_do', group == 'korean' & task == 'english_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p3 <- ggplot(data=filter(plot, study == '210510_do', group == 'mandarin' & task == 'english_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p4 <- ggplot(data=filter(plot, study == '210510_do', group == 'korean' & task == 'korean_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p5 <- ggplot(data=filter(plot, study == '210510_do', group == 'mandarin' & task == 'mandarin_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p6 <- ggplot(data=filter(plot, study == '210510_su', group == 'english' & task == 'english_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p7 <- ggplot(data=filter(plot, study == '210510_su', group == 'korean' & task == 'english_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p8 <- ggplot(data=filter(plot, study == '210510_su', group == 'mandarin' & task == 'english_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p9 <- ggplot(data=filter(plot, study == '210510_su', group == 'korean' & task == 'korean_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
p10 <- ggplot(data=filter(plot, study == '210510_su', group == 'mandarin' & task == 'mandarin_ajt'),
aes(x=environment, y=mean, group=dependency, col=dependency, shape=dependency))
s <- list(
annotate("rect",
xmin = 0, xmax = 4,
ymin = 0+(100/3),
ymax = 0+(100/3)+(100/3),
alpha = .15),
geom_hline(yintercept = 50),
geom_line(lwd = 1),
geom_point(size = 2),
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.2, lwd=1, linetype=1),
theme_classic(),
scale_x_discrete(name='environment',
limits = c('short', 'long', 'island'),
labels = c('short', 'long', 'island')),
scale_y_continuous(name='% acceptance',
limits=c(0, 100)),
scale_colour_manual(name='dependency',
values=c('#648fff', '#ffb000'),
labels=c('gap', 'resumption')),
scale_shape_manual(name='dependency',
values=c(16, 15),
labels=c('gap', 'resumption')),
theme(text = element_text(size = 12),
plot.title = element_text(size = 12, hjust = .5)),
facet_wrap(~panel)
)
p1 + s + theme(legend.position = "none",
axis.title.x = element_blank(),
plot.margin = margin(0, 0, -2, 0, "cm")) +
p2 + s + theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.margin = margin(0, 0, -2, 0, "cm")) +
p3 + s + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.margin = margin(0, 0, -2, 0, "cm")) +
patchwork::plot_spacer() +
p4 + s + theme(legend.position = c(-.8, .65),
axis.title.y = element_blank()) +
p5 + s + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
md <- crit %>%
mutate(environment = fct_relevel(environment, 'short', 'long', 'island'),
dependency = as.factor(dependency)) %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE)) %>%
filter(study == '210510_do',
group == 'korean',
task == 'korean_ajt')
check <- md %>%
group_by(study, group, participant) %>%
summarise() %>%
ungroup()
contrasts(md$dependency)
contrasts(md$environment)
class(md$dependency)
class(md$environment)
model2 <- glmer(acceptance ~ dependency * environment +
(1 + dependency + environment | participant) +
(1 | item), data = md, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
summary(model2)
# doko (fast!)
md2doko <- model2 %>% saveRDS(model1, file = 'models/ajt_doko_acc_md2.rds')
# doko (fast!)
md2doko <- model2 %>% saveRDS(file = 'models/ajt_doko_acc_md2.rds')
model3 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment | participant) +
(1 | item),
data = md, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
summary(model3)
anova(model2, model3)
model3 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment || participant) +
(1 | item),
data = md, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
summary(model3)
saveRDS(model3, file = 'models/ajt_doko_acc_md3.rds')
anova(model2, model3)
model4 <- glmer(acceptance ~ dependency * environment +
(1 + dependency + environment || participant) +
(1 + dependency + environment || item),
data = md, family = binomial, control = glmerControl(optimizer = 'bobyqa',
optCtrl=list(maxfun = 1e6)))
summary(model4)
saveRDS(model3, file = 'models/ajt_doko_acc_md4.rds')
beep(1)
saveRDS(model4, file = 'models/ajt_doko_acc_md4.rds')
anova(model2, model4)
summary(model2)
start = tic()
end = toc()
end
start = tic;
end = toc(start);
end
start = tic()
end = toc()
end
end = toc(tic)
end
end = toc()/60
end
modeltest <- glmer(acceptance ~ dependency * environment +
(1 | participant) +
(1 | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6))) %>%
summary() %>%
write_rds('models/ajt_doko_acc_mdtest.rds')
summary(modeltest)
beep(1)
beep()
tic()
model3 <- glmer(acceptance ~ dependency * environment +
(1 + dependency + environment | participant) +
(1 + dependency + environment | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6))) %>%
write_rds('models/ajt_doko_acc_md3.rds')
summary(model3)
toc()
beep()
tic()
model4 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment | participant) +
(1 | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6))) %>%
write_rds('models/ajt_doko_acc_md4.rds')
summary(model4)
toc()
beep()
tic()
model5 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment || participant) +
(1 | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6))) %>%
write_rds('models/ajt_doko_acc_md5.rds')
summary(model5)
toc()
beep()
988/60
anova(model3, model5)
anova(model3, model6)
anova(model3, model5)
anova(model5, model3)
tic()
model6 <- glmer(acceptance ~ dependency * environment +
(1 + dependency + environment | participant) +
(1 | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6))) %>%
write_rds('models/ajt_doko_acc_md6.rds') %>%
summary()
#summary(model6)
toc()
beep()
summary(model6)
anova(model3, model5, model6)
anova(model3, model6)
anova(model6, model3)
summary(model6)
anova(model5, model3)
anova(model6, model3)
model6 <- read_rds('models/ajt_doko_acc_md6.rds')
anova(model6, model3)
md <- md %>%
filter(study == '210510_do',
group == 'english',
task == 'english_ajt')
check <- md %>%
group_by(study, group, participant) %>%
summarise() %>%
ungroup()
temp <- crit %>%
mutate(environment = fct_relevel(environment, 'short', 'long', 'island'),
dependency = as.factor(dependency)) %>%
mutate(acceptance = case_when(response > 3.5 ~ TRUE,
response < 3.5 ~ FALSE))
md <- temp %>%
filter(study == '210510_do',
group == 'english',
task == 'english_ajt')
View(md)
check <- md %>%
group_by(study, group, participant) %>%
summarise() %>%
ungroup()
contrasts(md$dependency)
contrasts(md$environment)
md <- temp %>%
filter(study == '210510_do',
group == 'english',
task == 'english_ajt')
check <- md %>%
group_by(study, group, participant) %>%
summarise() %>%
ungroup()
contrasts(md$dependency)
contrasts(md$environment)
tic()
model1 <- glmer(acceptance ~ dependency * environment +
(1 + dependency * environment | participant) +
(1 + dependency * environment | item),
data = md, family = binomial,
control = glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun = 1e6))) %>%
write_rds('models/ajt_doenen_acc_md1.rds')
summary(model1)
toc()
beep()
3400/60
